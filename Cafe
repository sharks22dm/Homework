from time import sleep
from threading import Thread, Event
import queue


class Table:

    def __init__(self, number):
        self.number = number
        self.is_busy = 'свободен'


class Cafe(Thread):

    def __init__(self, queue):
        super().__init__()
        self.queue = queue

    def run(self):
        for customer_num in range(1, 21):
            print(f'Посетитель {customer_num} прибыл')
            self.queue.put(customer_num)
            sleep(1)


class Customer(Thread):

    def __init__(self, queue, tables, event):
        super().__init__()
        self.queue = queue
        self.tables = tables
        self.event = event

    def run(self):
        while not self.event.is_set():
            for table in self.tables:
                if table.is_busy == 'свободен':
                    table.is_busy = 'занят'
                    customer_num = self.queue.get()
                    print(f'Посетитель {customer_num} сел за стол {table.number}')
                    sleep(5)
                    print(f'Посетитель {customer_num} покушал и ушел')
                    table.is_busy = 'свободен'
                    if self.queue.qsize() == 0:
                        self.event.set()
                        break


tables = [Table(1), Table(2), Table(3)]

queue = queue.Queue()
event = Event()

cafe = Cafe(queue)
t1 = Customer(queue, tables, event)
t2 = Customer(queue, tables, event)
t3 = Customer(queue, tables, event)

cafe.start()
t1.start()
t2.start()
t3.start()

cafe.join()
t1.join()
t2.join()
t3.join()
